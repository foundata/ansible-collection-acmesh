# Setup: Manage basic resource installation, such as packages or service users.

---

- name: "Setup | Install | Default | Remove unwanted packages (e.g., to prevent conflicts or resolve incompatibilities)"
  ansible.builtin.package:
    name: "{{ __run_acmesh_packages_removal }}"
    state: "absent"
  when:
    - __run_acmesh__packages_removal is defined
    - (__run_acmesh__packages_removal | length) > 1


- name: "Setup | Install | Default | Install or upgrade packages"
  ansible.builtin.package:
    name: "{{ __run_acmesh_packages_install }}"
    state: "{{ 'latest' if run_acmesh_autoupgrade else 'present' }}"
    # work-around for conflicts with curl-minimal on Red Hat platforms
    allowerasing: "{{ true if (((ansible_facts['os_family'] | lower) == 'redhat') and ('curl' in __run_acmesh_packages_install)) else omit }}"
  when:
    - __run_acmesh_packages_install is defined
    - (__run_acmesh_packages_install | length) > 1


- name: "Setup | Install | Default | Get upstream release version data (GitHub API)"
  ansible.builtin.uri:
    url: "{{ __run_acmesh_githubapi_release_latest_url }}"
    method: "GET"
    body_format: "json"
    return_content: true
  ignore_errors: true
  register: __run_acmesh_github_response


- name: "Setup | Install | Default | Set latest upstream version as fact"
  ansible.builtin.set_fact:
    __run_acmesh_version_upstream: >-
      {%- if __run_acmesh_github_response is success and
             __run_acmesh_github_response.json is defined and
             __run_acmesh_github_response.json.tag_name is defined -%}
        {%- set version = __run_acmesh_github_response.json.tag_name | regex_replace('^v', '') -%}
        {{- version if (version is match('^[0-9\.]*$')) else '' -}}
      {%- else -%}
        {{ false }}
      {%- endif -%}


- name: "Setup | Install | Default | Display latest upstream version (if any, false means \"nothing detected\")"
  ansible.builtin.debug:
    var: __run_acmesh_version_upstream
    verbosity: 1


- name: "Setup | Install | Default | Create the service user"
  ansible.builtin.user:
    comment: "ACME client for issuing X.509 certs"
    create_home: true
    force: true
    home: "{{ run_acmesh_cfg_home }}"
    # We first used "acme.sh" as username. However, a dot is not allowed in the
    # "User=" directive of systemd versions shipped with RHEL8 in October 2019, cf:
    # - https://github.com/systemd/systemd/issues/12754
    # - https://bugzilla.redhat.com/show_bug.cgi?id=1717603
    # To be on the safe side, we switched from "acme.sh" to "acmesh" as username.
    name: "{{ run_acmesh_user }}"
    password: "!" # locked / disabled password
    remove: true
    shell: "/sbin/nologin"
    state: "present"
    system: false
    update_password: "always"
    umask: "0027"


  # Most systems automatically create the (primary) group for a new user when
  # the "group" parameter of ansible.builtin.user is omitted, usually with a GID
  # matching the UID. openSUSE is an exception to this rule and requires
  # explicit group creation.
- name: "Setup | Install | Default | Create the group for the service user"
  ansible.builtin.group:
    name: "{{ run_acmesh_group }}"
    state: "present"
    system: false
    force: false


- name: "Setup | Install | Default | Add service user to the group"
  ansible.builtin.user:
    name: "{{ run_acmesh_user }}"
    groups:
      - "{{ run_acmesh_group }}"
    append: false # remove from all groups (except the primary one)


- name: "Setup | Install | Default | Create a temporary working directory"
  ansible.builtin.tempfile:
    state: "directory"
    suffix: "-acmesh"
  changed_when: false
  when:
    - not __run_acmesh_version_installed
  register: __run_acmesh_tempdir


- name: "Setup | Install | Default | Display the temporary working directory's path"
  ansible.builtin.debug:
    var: __run_acmesh_tempdir
    verbosity: 2
  when:
    - not __run_acmesh_version_installed


- name: "Setup | Install | Default | git clone {{ __run_acmesh_git_url }}"
  ansible.builtin.git:
    repo: "{{ __run_acmesh_git_url }}"
    # on "master" branch as latest: https://github.com/acmesh-official/acme.sh/issues/1162
    version: "{{ (__run_acmesh_version_upstream) | ternary(__run_acmesh_version_upstream, __run_acmesh_git_fallback_version_branch) }}"
    dest: "{{ __run_acmesh_tempdir['path'] }}"
    update: true
  when:
    - not __run_acmesh_version_installed


- name: "Setup | Install | Default | Ensure existence and permissions of main directories"
  ansible.builtin.file:
    path: "{{ item }}"
    state: "directory"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0750
  loop:
    - "{{ run_acmesh_cfg_home }}"
    - "{{ run_acmesh_cfg_config_home }}"
    - "{{ run_acmesh_cfg_cert_home }}"


- name: "Setup | Install | Default | Ensure log file existence"
  ansible.builtin.copy:
    dest: "{{ item }}"
    content: ""
    force: false # create file only if it is not already existing
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rw,g=,o=" # 0600
  loop:
    - "{{ run_acmesh_cfg_logfile }}"


- name: "Setup | Install | Default | Install acme.sh"
  # The command module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with acme.sh.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  #
  # Notes on the command itself:
  #
  # See the official documentation for a explanation of the parameters:
  # https://github.com/acmesh-official/acme.sh/wiki/Options-and-Params
  ansible.builtin.command:
    cmd: >
      ./acme.sh
        --install
        --home "{{ run_acmesh_cfg_home }}"
        --config-home "{{ run_acmesh_cfg_config_home }}"
        --certhome "{{ run_acmesh_cfg_cert_home }}"
        --log "{{ run_acmesh_cfg_logfile }}"
        --log-level {{ run_acmesh_cfg_log_level }}
        --syslog {{ run_acmesh_cfg_syslog }}
        --nocron
        {{ '--auto-upgrade 1'
          if ((run_acmesh_autoupgrade is defined) and
              (run_acmesh_autoupgrade))
          else
          '--auto-upgrade 0' }}
        {{ '--accountemail "' ~ run_acmesh_cfg_accountemail ~ '"'
          if ((run_acmesh_cfg_accountemail is defined) and
              (run_acmesh_cfg_accountemail))
          else
          '' }}
  args:
    chdir: "{{ __run_acmesh_tempdir['path'] }}"
    creates: "{{ run_acmesh_cfg_home }}/acme.sh"
  when:
    - not __run_acmesh_version_installed


- name: "Setup | Install | Default | Upgrade acme.sh"
  # The command module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with acme.sh.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  #
  # Notes on the command itself:
  #
  # The --upgrade parameter alone would generally be sufficient. However, acme.sh
  # can update, modify, or correct configuration values during execution of most
  # subcommands. Setting the configuration parameters again ensures consistency and
  # does no harm. See the official documentation for a explanation of the parameters:
  # https://github.com/acmesh-official/acme.sh/wiki/Options-and-Params
  ansible.builtin.command:
    cmd: >
      ./acme.sh
        --upgrade
        --home "{{ run_acmesh_cfg_home }}"
        --config-home "{{ run_acmesh_cfg_config_home }}"
        --certhome "{{ run_acmesh_cfg_cert_home }}"
        --log "{{ run_acmesh_cfg_logfile }}"
        --log-level {{ run_acmesh_cfg_log_level }}
        --syslog {{ run_acmesh_cfg_syslog }}
        {{ '--auto-upgrade 1'
          if ((run_acmesh_autoupgrade is defined) and
              (run_acmesh_autoupgrade))
          else
          '--auto-upgrade 0' }}
        {{ '--accountemail "' ~ run_acmesh_cfg_accountemail ~ '"'
          if ((run_acmesh_cfg_accountemail is defined) and
              (run_acmesh_cfg_accountemail))
          else
          '' }}
  args:
    chdir: "{{ run_acmesh_cfg_home }}"
  when:
    - __run_acmesh_version_installed
    - __run_acmesh_version_upstream
    - run_acmesh_autoupgrade is defined
    - run_acmesh_autoupgrade
    - __run_acmesh_version_installed is version(__run_acmesh_version_upstream, 'lt', version_type='semver')
  changed_when:
    - __run_acmesh_upgrade_result.rc == 0
    - "'Upgrade success' in __run_acmesh_upgrade_result.stdout"
  register: __run_acmesh_upgrade_result


# update facts related to state of the local installation
- name: "Setup | Install | Default | Determine installed version again"
  # The shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to retrieve the version.
  # - The script includes inline logic to handle potential edge cases (e.g.,
  #   non-numeric output) while only using standard tooling. A replacement
  #   would require many additional tasks with little to no benefit.
  # - Using ansible.builtin.stat and/or ansible.builtin.command for a safer exec
  #   environment would require additional tasks with little to no benefit.
  # - Security concerns are mitigated by strict path usage and input validation.
  ansible.builtin.shell:
    cmd: |
      __run_acmesh_version_installed=''
      if command -v '{{ run_acmesh_cfg_home }}/acme.sh' > /dev/null 2>&1
      then
        __run_acmesh_version_installed="$({{ run_acmesh_cfg_home }}/acme.sh --version | tail -1 | sed -e 's/^v//g')"
        if ! printf '%s' "${__run_acmesh_version_installed}" | grep -E -q -e '^[[:digit:]\.]*$'
        then
          __run_acmesh_version_installed=''
        fi
      fi
      printf '%s' "${__run_acmesh_version_installed}"
      exit 0
    executable: "/bin/bash" # this inline script was only tested with Bash yet, so hardcode the shell
  changed_when: false
  ignore_errors: true
  register: __run_acmesh_version_installed_result


- name: "Setup | Install | Default | Update / overwrite installed version fact"
  ansible.builtin.set_fact:
    __run_acmesh_version_installed: "{{ (__run_acmesh_version_installed_result) | ternary(__run_acmesh_version_installed_result['stdout'], false) }}"


- name: "Setup | Install | Default | Display installed version (if any, false means \"not installed\")"
  ansible.builtin.debug:
    var: __run_acmesh_version_installed
    verbosity: 1


- name: "Setup | Install | Default | Check if acme.sh.env file exists"
  ansible.builtin.stat:
    path: "{{ run_acmesh_cfg_home }}/acme.sh.env" # might be missing if acme.sh was installed with --no-profile
    get_checksum: false
    get_mime: false
    get_attributes: false
  register: __run_acmesh_envfile_stat_result


# Modifying the calling user's .bashrc is the default installer behavior.
# Let's remove the source-calls in individual user .bashrc file and create a
# system-wide alias for acme.sh with all required options instead.
- name: "Setup | Install | Default | Symlink env file for profile.d"
  ansible.builtin.file:
    src: "{{ run_acmesh_cfg_home }}/acme.sh.env"
    dest: "{{ __run_acmesh_profiled_envfile }}"
    state: "link"
  when:
    - __run_acmesh_envfile_stat_result is defined
    - __run_acmesh_envfile_stat_result['stat']['exists']


- name: "Setup | Install | Default | Remove redundant env file sourcing from the user's .bashrc"
  ansible.builtin.lineinfile:
    path: "{{ run_acmesh_cfg_home }}/.bashrc"
    state: "absent"
    regexp: "^\\. \"{{ run_acmesh_cfg_home }}/acme.sh.env\"$"
  when:
    - __run_acmesh_envfile_stat_result is defined
    - __run_acmesh_envfile_stat_result['stat']['exists']


# TODO
# remove in future versions of this role once all acme.sh versions ≤ 3.0.6 are
# guaranteed to be absent in all environments.
# https://github.com/acmesh-official/acme.sh/issues/4763#issuecomment-1695832047
- name: "Setup | Install | Default | Temporary workaround for issue 4763 (dns_inwx broken in versions <= 3.0.6)"
  ansible.builtin.lineinfile:
    path: "{{ run_acmesh_cfg_home }}/dnsapi/dns_inwx.sh"
    regexp: '^([\t ]+?INWX_Cookie.+)grep \"\^(.+)$'
    line: '\1grep -i "^\2'
    backrefs: true
  when:
    - __run_acmesh_version_installed
    - __run_acmesh_version_installed is version('3.0.6', 'le', version_type='semver')


- name: "Setup | Install | Default | Find directories belonging to acme.sh"
  ansible.builtin.find:
    paths:
      - "{{ run_acmesh_cfg_home }}"
      - "{{ run_acmesh_cfg_config_home }}"
      - "{{ run_acmesh_cfg_cert_home }}"
    file_type: "directory"
    recurse: true
    hidden: true
    get_checksum: false
  register: __run_acmesh_dirs # does not contain the dirs listed at "paths:" themselfs


- name: "Setup | Install | Default | Find files belonging to acme.sh"
  ansible.builtin.find:
    paths:
      - "{{ run_acmesh_cfg_home }}"
      - "{{ run_acmesh_cfg_config_home }}"
      - "{{ run_acmesh_cfg_cert_home }}"
    file_type: "file"
    recurse: true
    hidden: true
    get_checksum: false
  register: __run_acmesh_files


- name: "Setup | Install | Default | Set permissions of directories (restrict to owner and group)"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "directory"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0750
  loop: "{{ __run_acmesh_dirs.files }}"


- name: "Setup | Install | Default | Set permissions of files (restrict to owner and group)"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "file"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rw,g=r,o=" # 0640
  loop: "{{ __run_acmesh_files.files }}"
  when:
    # exclude resources with special permissions (they will be handled later)
    - item.path != (run_acmesh_cfg_home ~ '/acme.sh')
    - item.path is not regex('^' ~ run_acmesh_cfg_home ~ '/deploy/.+\.sh$')
    - item.path is not regex('^' ~ run_acmesh_cfg_home ~ '/dnsapi/.+\.sh$')
    - item.path is not regex('^' ~ run_acmesh_cfg_home ~ '/notify/.+\.sh$')
    - item.path != (run_acmesh_cfg_config_home ~ '/account.conf')
    - item.path != run_acmesh_cfg_logfile


- name: "Setup | Install | Default | Set permission of executables (restrict to owner and group)"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: "file"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0755
  loop: "{{ __run_acmesh_files.files }}"
  when:
    - (item.path == (run_acmesh_cfg_home ~ '/acme.sh')) or
      (item.path is regex('^' ~ run_acmesh_cfg_home ~ '/deploy/.+\.sh$')) or
      (item.path is regex('^' ~ run_acmesh_cfg_home ~ '/dnsapi/.+\.sh$')) or
      (item.path is regex('^' ~ run_acmesh_cfg_home ~ '/notify/.+\.sh$'))
    - item.path != (run_acmesh_cfg_config_home ~ '/account.conf')
    - item.path != run_acmesh_cfg_logfile


- name: "Setup | Install | Default | Set permissions of sensitive resources (restrict to owner)"
  ansible.builtin.file:
    path: "{{ item }}"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rw,g=,o=" # 0600
  loop:
    - "{{ run_acmesh_cfg_config_home }}/account.conf" # may contain credentials (e.g. DNS API or notify credentials)
    - "{{ run_acmesh_cfg_logfile }}"


- name: "Setup | Install | Default | Clean-up temporary working directory"
  ansible.builtin.file:
    path: "{{ __run_acmesh_tempdir['path'] }}"
    state: "absent"
  when:
    - __run_acmesh_tempdir is defined
    - __run_acmesh_tempdir['path'] is defined
