# Certificates: Manage and issue certificates

---

# These tasks for copying existing certificates can be useful in non-production
# environments during development to avoid hitting CA rate limits or encountering
# similar restrictions.
- name: "Cert | Default | Check for pre-seeded cert dirs (RSA) at local source"
  delegate_to: "localhost"
  become: false
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/files/acme.sh/certhome/{{ item }}"
    get_checksum: false
    get_mime: false
    get_attributes: false
  when:
    - run_acmesh_certs is defined
  loop: >
    {{ run_acmesh_certs | selectattr('domains', 'defined') | map(attribute='domains') |
       flatten | selectattr('name', 'defined') | map(attribute='name') | unique }}
  register: __run_acmesh_local_preseed_rsa_result


- name: "Cert | Default | Show data about pre-seeded cert dirs (RSA) at local source"
  ansible.builtin.debug:
    var: __run_acmesh_local_preseed_rsa_result
    verbosity: 3
  when:
    - run_acmesh_certs is defined
    - __run_acmesh_local_preseed_rsa_result is defined


- name: "Cert | Default | Pre-seed already issued certs (RSA) from local source (if any)"
  ansible.builtin.copy:
    src: "{{ item['stat']['path'] }}"
    dest: "{{ run_acmesh_cfg_cert_home }}"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    directory_mode: "u=rwx,g=rx,o=" # 0750
    mode: "u=rw,g=rw,o=" # 0640
    remote_src: false
    decrypt: true
    force: false # do not overwrite anything if already existing on target
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
    - item['stat'] is defined
    - item['stat']['exists']
    - item['stat']['path'] is defined
  loop: "{{ __run_acmesh_local_preseed_rsa_result['results'] }}"


- name: "Cert | Default | Check for pre-seeded cert dirs (ECC) at local source"
  delegate_to: "localhost"
  become: false
  ansible.builtin.stat:
    path: "{{ playbook_dir }}/files/acme.sh/certhome/{{ item }}_ecc"
    get_checksum: false
    get_mime: false
    get_attributes: false
  when:
    - run_acmesh_certs is defined
  loop: >
    {{ run_acmesh_certs | selectattr('domains', 'defined') | map(attribute='domains') |
       flatten | selectattr('name', 'defined') | map(attribute='name') | unique }}
  register: __run_acmesh_local_preseed_ecc_result


- name: "Cert | Default | show data about pre-seeded cert dirs (ECC) at local source"
  ansible.builtin.debug:
    var: __run_acmesh_local_preseed_ecc_result
    verbosity: 3
  when:
    - run_acmesh_certs is defined
    - __run_acmesh_local_preseed_ecc_result is defined


- name: "Cert | Default | Pre-seed already issued certs (ECC) from local source (if any)"
  ansible.builtin.copy:
    src: "{{ item['stat']['path'] }}"
    dest: "{{ run_acmesh_cfg_cert_home }}"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    directory_mode: "u=rwx,g=rx,o=" # 0750
    mode: "u=rw,g=r,o=" # 0640
    remote_src: false
    decrypt: true
    force: false # do not overwrite anything if already existing on target
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
    - item['stat'] is defined
    - item['stat']['exists']
    - item['stat']['path'] is defined
  loop: "{{ __run_acmesh_local_preseed_ecc_result['results'] }}"


- name: "Cert | Default | Issue certificate(s)"
  # The command or shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with the
  #   used command.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  ansible.builtin.command:
    cmd: >
      ./acme.sh
        --issue
        --config-home {{ run_acmesh_cfg_config_home | ansible.builtin.quote }}
        --certhome {{ run_acmesh_cfg_cert_home | ansible.builtin.quote }}
        {% for item_domain in item['domains'] %}
          --domain {{ item_domain['name'] | ansible.builtin.quote }}
          {{ '--dns ' ~ (item_domain['challenge']['dns_provider'] | ansible.builtin.quote)
              if ((item_domain['challenge'] is defined) and
                  (item_domain['challenge']['type'] is defined) and
                  (item_domain['challenge']['type'] == 'dns') and
                  (item_domain['challenge']['dns_provider'] is defined) and
                  (item_domain['challenge']['dns_provider']))
              else
              '' }}
          {{ '--domain-alias ' ~ (item_domain['challenge']['domain_alias'] | ansible.builtin.quote)
              if ((item_domain['challenge']['domain_alias'] is defined) and
                  (item_domain['challenge']['domain_alias']))
              else
              '' }}
          {{ '--challenge-alias ' ~ (item_domain['challenge']['challenge_alias'] | ansible.builtin.quote)
              if ((item_domain['challenge']['challenge_alias'] is defined) and
                  (item_domain['challenge']['challenge_alias']))
              else
              '' }}
          {{ '--webroot ' ~ (item_domain['challenge']['webroot'] | ansible.builtin.quote)
              if ((item_domain['challenge'] is defined) and
                  (item_domain['challenge']['type'] is defined) and
                  (item_domain['challenge']['type'] == 'webroot') and
                  (item_domain['challenge']['webroot'] is defined) and
                  (item_domain['challenge']['webroot']))
              else
              '' }}
          {{ '--standalone'
              if ((item_domain['challenge'] is defined) and
                  (item_domain['challenge']['type'] is defined) and
                  (item_domain['challenge']['type'] == 'standalone'))
              else
              '' }}
          {{ '--httpport ' ~ (item_domain['challenge']['httpport'] | ansible.builtin.quote)
              if ((item_domain['challenge']['httpport'] is defined) and
                  (item_domain['challenge']['httpport']))
              else
              '' }}
          {{ '--alpn'
              if ((item_domain['challenge'] is defined) and
                  (item_domain['challenge']['type'] is defined) and
                  (item_domain['challenge']['type'] == 'alpn'))
              else
              '' }}
          {{ '--tlsport ' ~ (item_domain['challenge']['tlsport'] | ansible.builtin.quote)
              if ((item_domain['challenge']['tlsport'] is defined) and
                  (item_domain['challenge']['tlsport']))
              else
              '' }}
        {% endfor %}
        {{ '--force'
            if ((item['force'] is defined) and
                (item['force']))
            else
            '' }}
        {{ '--debug'
            if ((item['debug'] is defined) and
                (item['debug']))
            else
            '' }}
        {{ '--dnssleep ' ~ (item['dnssleep'] | ansible.builtin.quote)
            if (item['dnssleep'] is defined)
            else
            '' }}
        {{ '--pre-hook ' ~ (item['pre_hook'] | ansible.builtin.quote)
            if ((item['pre_hook'] is defined) and
                (item['pre_hook']))
            else
            '' }}
        {{ '--post-hook ' ~ (item['post_hook'] | ansible.builtin.quote)
            if ((item['post_hook'] is defined) and
                (item['post_hook']))
            else
            '' }}
        {{ '--renew-hook ' ~ (item['renew_hook'] | ansible.builtin.quote)
            if ((item['renew_hook'] is defined) and
                (item['renew_hook']))
            else
            '' }}
        {{ '--server ' ~ (item['server'] | ansible.builtin.quote)
            if ((item['server'] is defined) and
                (item['server']))
            else
            '--server letsencrypt' }}
        {{  item['extra_flags']
            if (item['extra_flags'] is defined)
            else
            '' }}
  args:
    chdir: "{{ run_acmesh_cfg_home }}"
  environment: "{{ run_acmesh_environment | default(omit) }}"
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
  changed_when:
    - __run_acmesh_issue_result['rc'] == 0
    - ('Cert success') in __run_acmesh_issue_result['stdout']
  failed_when: >
    (run_acmesh_certs is not defined) or
    (__run_acmesh_issue_result['rc'] != 0 and 'Domains not changed' not in __run_acmesh_issue_result['stdout'])
  loop: "{{ run_acmesh_certs }}"
  register: __run_acmesh_issue_result
  notify: "run_acmesh: set ownership and permissions"


- name: "Cert | Default | Create target directories for certificate installation(s) (based on data for --ca-file, if any)"
  ansible.builtin.file:
    path: "{{ item['ca_file'] | dirname }}"
    state: "directory"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0750
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
  loop: "{{ run_acmesh_certs | selectattr('install', 'defined') | map(attribute='install') | selectattr('ca_file', 'defined') | list }}"


- name: "Cert | Default | Create target directories for certificate installation(s) (based on data for --cert-file, if any)"
  ansible.builtin.file:
    path: "{{ item['cert_file'] | dirname }}"
    state: "directory"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0750
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
  loop: "{{ run_acmesh_certs | selectattr('install', 'defined') | map(attribute='install') | selectattr('cert_file', 'defined') | list }}"


- name: "Cert | Default | Create target directories for certificate installation(s) (based on data for --fullcain-file, if any)"
  ansible.builtin.file:
    path: "{{ item['fullcain_file'] | dirname }}"
    state: "directory"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0750
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
  loop: "{{ run_acmesh_certs | selectattr('install', 'defined') | map(attribute='install') | selectattr('fullcain_file', 'defined') | list }}"


- name: "Cert | Default | Create target directories for certificate installation(s) (based on data for --key-file, if any)"
  ansible.builtin.file:
    path: "{{ item['key_file'] | dirname }}"
    state: "directory"
    owner: "{{ run_acmesh_user }}"
    group: "{{ run_acmesh_group }}"
    mode: "u=rwx,g=rx,o=" # 0750
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
  loop: "{{ run_acmesh_certs | selectattr('install', 'defined') | map(attribute='install') | selectattr('key_file', 'defined') | list }}"


- name: "Cert | Default | Install certificate(s)"
  # The command or shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with the
  #   used command.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  ansible.builtin.command:
    cmd: >
      ./acme.sh
        --install-cert
        --config-home {{ run_acmesh_cfg_config_home | ansible.builtin.quote }}
        --certhome {{ run_acmesh_cfg_cert_home | ansible.builtin.quote }}
        --domain {{ item['domains'][0]['name'] | ansible.builtin.quote }}
        {{ '--ca-file ' ~ (item['install']['ca_file'] | ansible.builtin.quote)
            if ((item['install']['ca_file'] is defined) and
                (item['install']['ca_file']))
            else
            '' }}
        {{ '--cert-file ' ~ (item['install']['cert_file'] | ansible.builtin.quote)
            if ((item['install']['cert_file'] is defined) and
                (item['install']['cert_file']))
            else
            '' }}
        {{ '--fullchain-file ' ~ (item['install']['fullcain_file'] | ansible.builtin.quote)
            if ((item['install']['fullcain_file'] is defined) and
                (item['install']['fullcain_file']))
            else
            '' }}
        {{ '--key-file ' ~ (item['install']['key_file'] | ansible.builtin.quote)
            if ((item['install']['key_file'] is defined) and
                (item['install']['key_file']))
            else
            '' }}
        {{ '--reloadcmd ' ~ (item['install']['reloadcmd'] | ansible.builtin.quote)
            if ((item['install']['reloadcmd'] is defined) and
                (item['install']['reloadcmd']))
            else
            '' }}
  args:
    chdir: "{{ run_acmesh_cfg_home }}"
  environment: "{{ run_acmesh_environment | default(omit) }}"
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
  changed_when:
    - __run_acmesh_install_result['rc'] == 0
    - ('Cert success') in __run_acmesh_install_result['stdout']
  # Errors from --reloadcmd are ignored to avoid chicken-and-egg issues. These
  # errors typically occur when services required for reloading are not yet
  # running because they depend on valid certificates. Services managed by
  # Ansible that rely on these certificates should trigger relevant errors later
  # if issues persist.
  failed_when: >
    (run_acmesh_certs is not defined) or
    (__run_acmesh_install_result['rc'] != 0 and 'Installing' not in __run_acmesh_install_result['stdout']) or
    (
      __run_acmesh_install_result['rc'] != 0 and
      ((__run_acmesh_install_result['stderr_lines'] | length) > 0) and
      'Reload error' not in __run_acmesh_install_result['stderr']
    )
  loop: "{{ run_acmesh_certs }}"
  register: __run_acmesh_install_result
  notify: "run_acmesh: set ownership and permissions"


- name: "Cert | Default | Update certificate hook and reload cmd configurations"
  # The command or shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with the
  #   acme.sh configuration file of a certificate. This needs complex string
  #   processing with base64 encoding/decoding, multiple Ansible tasks would
  #   be overkill. Feel free to write an Ansible module instead and remove this
  #   then (patched welcome).
  # - This is a workaround for an upstream issue and might get removed when
  #   the functionality gets added upstream:
  #   https://github.com/acmesh-official/acme.sh/issues/3936.
  #
  # Notes on the command or script itself:
  #
  # See the official documentation for a explanation of the influenced feature
  # https://github.com/acmesh-official/acme.sh/wiki/Using-pre-hook-post-hook-renew-hook-reloadcmd
  ansible.builtin.shell:
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails
      set -e # Exit on errors

      # Input parameters
      CERT_HOME={{ run_acmesh_cfg_cert_home | ansible.builtin.quote }}
      PRIMARY_DOMAIN={{ item['domains'][0]['name'] | ansible.builtin.quote }}
      EXPECTED_PRE_HOOK={{ item['pre_hook'] | default('') | ansible.builtin.quote }}
      EXPECTED_POST_HOOK={{ item['post_hook'] | default('') | ansible.builtin.quote }}
      EXPECTED_RENEW_HOOK={{ item['renew_hook'] | default('') | ansible.builtin.quote }}
      EXPECTED_RELOAD_CMD={{ ((item['install']['reloadcmd'] | default('')) if (item['install'] is defined) else '') | ansible.builtin.quote }}

      # Function: Decode base64 value from config line
      decode_value() {
          local line="${1}"
          base64_value=$(printf '%s' "${line}" | {{ __run_acmesh_sed_executable }} -n 's/.*__ACME_BASE64__START_\([^_]*\)__ACME_BASE64__END_.*/\1/p')
          if [ -n "${base64_value}" ]
          then
              printf '%s' "${base64_value}" | {{ __run_acmesh_base64_executable }} -d
          else
              printf ''
          fi
      }

      # Function: Base64 encode value from config line
      encode_value() {
          local value="$1"
          if [ -n "$value" ]
          then
              printf '%s' "__ACME_BASE64__START_$(printf '%s' "$value" | {{ __run_acmesh_base64_executable }} -w 0)__ACME_BASE64__END_"
          else
              printf ''
          fi
      }

      # Function: update a hook or renew command in config file
      update_b64option_in_config() {
          local config_file="${1}"
          local b64option_name="${2}"
          local new_value="${3}"
          local encoded_value="$(encode_value "${new_value}")"

          if [ -n "${encoded_value}" ]
          then
              # Update existing line
              if {{ __run_acmesh_grep_executable }} -q "^${b64option_name}=" "${CONFIG_FILE}"
              then
                  {{ __run_acmesh_sed_executable }} -i "s|^${b64option_name}=.*|${b64option_name}='${encoded_value}'|" "${CONFIG_FILE}"
              # Add new line
              else
                  printf '%s\n' "${b64option_name}='${encoded_value}'" >> "${CONFIG_FILE}"
              fi
          else
              # Set empty value in extsting line
              if {{ __run_acmesh_grep_executable }} -q "^${b64option_name}=" "${CONFIG_FILE}"
              then
                  {{ __run_acmesh_sed_executable }} -i "s|^${b64option_name}=.*|${b64option_name}=''|" "${CONFIG_FILE}"
              # Add new line
              else
                  printf '%s\n' "${b64option_name}=''" >> "${CONFIG_FILE}"
              fi
          fi
      }

      # Find the certificate config file. Try different possible locations:
      # ECC (most common / default), RSA, or unspecified (legacy default RSA)
      CONFIG_FILE=""
      for suffix in "_ecc" "_rsa" ""
      do
          possible_path="${CERT_HOME}/${PRIMARY_DOMAIN}${suffix}/${PRIMARY_DOMAIN}.conf"
          if [ -f "${possible_path}" ]
          then
              CONFIG_FILE="${possible_path}"
              break
          fi
      done
      if [ -z "${CONFIG_FILE}" ]
      then
          printf "error: No certificate config file found for domain: %s" "${PRIMARY_DOMAIN}" 1>&2
          exit 1
      fi

      # Process config file
      CURRENT_PRE_HOOK=""
      CURRENT_POST_HOOK=""
      CURRENT_RENEW_HOOK=""
      CURRENT_RELOAD_CMD=""
      while IFS= read -r line
      do
          case "${line}" in
              Le_PreHook=*)
                  CURRENT_PRE_HOOK="$(decode_value "${line}")"
                  ;;
              Le_PostHook=*)
                  CURRENT_POST_HOOK="$(decode_value "${line}")"
                  ;;
              Le_RenewHook=*)
                  CURRENT_RENEW_HOOK="$(decode_value "${line}")"
                  ;;
              Le_ReloadCmd=*)
                  CURRENT_RELOAD_CMD="$(decode_value "${line}")"
                  ;;
          esac
      done < "${CONFIG_FILE}"

      # Track if any changes are made
      CHANGES_MADE=0

      # Compare and update options if different
      if [ ! "$CURRENT_PRE_HOOK" = "${EXPECTED_PRE_HOOK}" ]
      then
          printf "Updating %s for %s: '%s' -> '%s'\n" "Le_PreHook" "${PRIMARY_DOMAIN}" "${CURRENT_PRE_HOOK}" "${EXPECTED_PRE_HOOK}"
          update_b64option_in_config "${CONFIG_FILE}" "Le_PreHook" "${EXPECTED_PRE_HOOK}"
          CHANGES_MADE=1
      fi

      if [ ! "$CURRENT_POST_HOOK" = "${EXPECTED_POST_HOOK}" ]
      then
          printf "Updating %s for %s: '%s' -> '%s'\n" "Le_PostHook" "${PRIMARY_DOMAIN}" "${CURRENT_POST_HOOK}" "${EXPECTED_POST_HOOK}"
          update_b64option_in_config "${CONFIG_FILE}" "Le_PostHook" "${EXPECTED_POST_HOOK}"
          CHANGES_MADE=1
      fi

      if [ ! "$CURRENT_RENEW_HOOK" = "${EXPECTED_RENEW_HOOK}" ]
      then
          printf "Updating %s for %s: '%s' -> '%s'\n" "Le_RenewHook" "${PRIMARY_DOMAIN}" "${CURRENT_RENEW_HOOK}" "${EXPECTED_RENEW_HOOK}"
          update_b64option_in_config "${CONFIG_FILE}" "Le_RenewHook" "${EXPECTED_RENEW_HOOK}"
          CHANGES_MADE=1
      fi

      if [ ! "${CURRENT_RELOAD_CMD}" = "${EXPECTED_RELOAD_CMD}" ]
      then
          printf "Updating %s for %s: '%s' -> '%s'\n" "Le_ReloadCmd" "${PRIMARY_DOMAIN}" "${CURRENT_RELOAD_CMD}" "${EXPECTED_RELOAD_CMD}"
          update_b64option_in_config "${CONFIG_FILE}" "Le_ReloadCmd" "${EXPECTED_RELOAD_CMD}"
          CHANGES_MADE=1
      fi

      if [ "${CHANGES_MADE}" = "1" ]
      then
          printf "Changed config file: Updated configuration for certificate %s." "${PRIMARY_DOMAIN}"
      fi

      exit 0
    executable: "/bin/bash" # Support for other shells untested (so far)
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
    - item is defined
    - item['domains'] is defined
    - (item['domains'] | length) > 0
  failed_when:
    - (__run_acmesh_cmdupdates_result['rc'] != 0) or
      ((__run_acmesh_cmdupdates_result['stderr_lines'] | length) > 0)
  changed_when:
    - __run_acmesh_cmdupdates_result['rc'] == 0
    - __run_acmesh_cmdupdates_result['stdout'] | trim | length > 0
  loop: "{{ run_acmesh_certs }}"
  register: __run_acmesh_cmdupdates_result
  notify: "run_acmesh: set ownership and permissions"


- name: "Cert | Default | Display hook and reload cmd configuration update results"
  ansible.builtin.debug:
    msg: "{{ item }}"
    verbosity: 3
  when:
    - __run_acmesh_version_installed
    - run_acmesh_certs is defined
    - item | length > 0
  loop: >-
    {{
      __run_acmesh_cmdupdates_result['results'] | default([])
      | selectattr('stdout_lines', 'defined')
      | selectattr('stdout_lines')
      | map(attribute='stdout_lines')
      | list
    }}


- name: "Cert | Default | Gather certificate information"
  ansible.builtin.command:
    cmd: >
      ./acme.sh --list --certhome {{ run_acmesh_cfg_cert_home | ansible.builtin.quote }}
  args:
    chdir: "{{ run_acmesh_cfg_home }}"
  when:
    - __run_acmesh_version_installed
    - ansible_verbosity > 3
  changed_when: false
  register: __run_acmesh_list_domains_result


- name: "Cert | Default | Show certificate information"
  ansible.builtin.debug:
    msg: "{{ __run_acmesh_list_domains_result['stdout_lines'] }}"
    verbosity: 3
  when:
    - __run_acmesh_version_installed
    - __run_acmesh_list_domains_result
    - ansible_verbosity > 3
