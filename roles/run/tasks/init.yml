# Initialization: Manage internal role setup and the Ansible environment.

---

- name: "Init | Gather role-specific facts"
  ansible.builtin.setup:
    gather_subset:
      - "distribution"
  when:
    - not ansible_facts.keys() | list | intersect(__run_acmesh_used_facts) == __run_acmesh_used_facts


- name: "Init | Include role meta data"
  ansible.builtin.include_vars:
    file: "../meta/main.yml"
    name: "__run_acmesh_meta"


- name: "Init | Check Ansible version requirement and fail if unmet"
  ansible.builtin.fail:
    msg: >
      This role requires Ansible {{ __run_acmesh_meta['galaxy_info']['min_ansible_version'] }}
      or higher. You are currently running Ansible {{ ansible_version['full'] }} .
  when:
    - ansible_version['full'] is version_compare(__run_acmesh_meta['galaxy_info']['min_ansible_version'], "<")


- name: "Init | Notify when platform support check is not possible"
  ansible.builtin.debug:
    msg: >
      The list of supported platforms cannot be checked as it is either empty
      or distribution facts are missing.
    verbosity: 1
  when:
    - ansible_facts['distribution'] is not defined or
      ansible_facts['distribution_version'] is not defined or
      (__run_acmesh_meta['galaxy_info']['platforms'] | length) < 1


- name: "Init | Warn when platform is unsupported"
  ansible.builtin.fail:
    msg: >
      {{ ansible_facts['distribution'] }} {{ ansible_facts['distribution_version'] }} is not in the list of
      supported platforms from vars/main.yml: {{ __run_acmesh_supported_platforms }}
  ignore_errors: true # noqa: ignore-errors
  when:
    - (__run_acmesh_supported_platforms | length) > 0
    - (__run_acmesh_supported_platforms
       | selectattr('name', 'match', '^' ~ ansible_facts['distribution'] ~ '$') | map(attribute = 'versions') | flatten
       | select('match', '^(' ~ ansible_facts['distribution_version'] ~ '|all)$', ignorecase = true) | list | length) < 1


- name: "Init | Set platform-specific filename list (most to least specific; raw with possible duplicates)"
  ansible.builtin.set_fact:
    __run_acmesh_platform_filenames_raw:
      - "{{ ansible_facts['distribution'].replace(' ', '_') | lower }}_{{ ansible_facts['distribution_version'].replace(' ', '_') | lower }}.yml"
      - "{{ ansible_facts['distribution'].replace(' ', '_') | lower }}_{{ ansible_facts['distribution_major_version'].replace(' ', '_') | lower }}.yml"
      - "{{ ansible_facts['distribution'].replace(' ', '_') | lower }}.yml"
      - "{{ ansible_facts['os_family'].replace(' ', '_') | lower }}.yml"


- name: "Init | Set unique platform-specific filename list (most to least specific)"
  ansible.builtin.set_fact:
    __run_acmesh_platform_filenames_most_specific_first: "{{ (__run_acmesh_platform_filenames_raw | ansible.builtin.unique | default([])) }}"


- name: "Init | Set unique platform-specific filename list (least to most specific)"
  ansible.builtin.set_fact:
    __run_acmesh_platform_filenames_most_specific_last: "{{ __run_acmesh_platform_filenames_most_specific_first | reverse }}"


- name: "Init | Include platform-specific variables (if any), overwrite values with more specific ones"
  ansible.builtin.include_vars:
    file: "{{ __run_acmesh_vars_file }}"
  loop: "{{ __run_acmesh_platform_filenames_most_specific_last }}"
  vars:
    __run_acmesh_vars_file: "{{ role_path }}/vars/{{ item }}"
  when:
    - __run_acmesh_vars_file is file


### acme.sh specific


- name: "Init | Show certificate settings"
  ansible.builtin.debug:
    var: run_acmesh_certs
    verbosity: 3


- name: "Init | Check certificate settings"
  ansible.builtin.assert:
    that:
      # check if there are items in the list of certs to handle...
      - run_acmesh_certs is defined
      - (run_acmesh_certs | length) > 0
      # ...and at least the first one has the expected structure
      #   certs:
      #     - domains:
      #         - name: "example.com"
      #     [...]
      # exists
      - run_acmesh_certs[0]['domains'] is defined
      - (run_acmesh_certs[0]['domains'] | length) > 0
      - run_acmesh_certs[0]['domains'][0]['name'] is defined
    fail_msg: "'run_acmesh_certs' data is invalid"
    success_msg: "'run_acmesh_certs' data seems to be valid"
  when:
    - run_acmesh_certs is defined
    - (run_acmesh_certs | length) > 0


- name: "Init | Determine installed version (if any)"
  # The shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to retrieve the version.
  # - The script includes inline logic to handle potential edge cases (e.g.,
  #   non-numeric output) while only using standard tooling. A replacement
  #   would require many additional tasks with little to no benefit.
  # - Using ansible.builtin.stat and/or ansible.builtin.command for a safer exec
  #   environment would require additional tasks with little to no benefit.
  # - Security concerns are mitigated by strict path usage and input validation.
  ansible.builtin.shell:
    cmd: |
      __run_acmesh_version_installed=""
      if command -v '{{ run_acmesh_cfg_home }}/acme.sh' > /dev/null 2>&1
      then
        __run_acmesh_version_installed="$({{ run_acmesh_cfg_home }}/acme.sh --version | tail -1 | sed -e 's/^v//g')"
        if ! printf '%s' "${__run_acmesh_version_installed}" | grep -E -q -e '^[[:digit:]\.]*$'
        then
          __run_acmesh_version_installed=''
        fi
      fi
      printf '%s' "${__run_acmesh_version_installed}"
    executable: "/usr/bin/bash" # this inline script was only tested with Bash yet, so hardcode the shell
  register: __run_acmesh_version_installed_result
  ignore_errors: true
  changed_when: false


- name: "Init | Set installed version as fact"
  ansible.builtin.set_fact:
    __run_acmesh_version_installed: "{{ (__run_acmesh_version_installed_result) | ternary(__run_acmesh_version_installed_result['stdout'], false) }}"


- name: "Init | Display installed version (if any, false means \"not installed\")"
  ansible.builtin.debug:
    var: __run_acmesh_version_installed
    verbosity: 1
