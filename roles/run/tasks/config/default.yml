# Configuration: Manage settings, like adapting or creating config files.

---

- name: "Config | Default | Configure acme.sh"
  # The command or shell module is used here. This approach is justified:
  #
  # - No built-in Ansible module provides a direct way to interact with the
  #   used command.
  # - Inline templating allows for safe and efficient parameter handling,
  #   avoiding the need for multiple additional tasks with little to no benefit.
  #
  # Notes on the command or script itself:
  #
  # acme.sh can update, modify, or correct configuration values during
  # execution of most subcommands. Therefore, we simply call the --info command,
  # which itself does not perform any certificate-related actions but allows
  # us to update the configuration. See the official documentation for a
  # explanation of the parameters:
  # https://github.com/acmesh-official/acme.sh/wiki/Options-and-Params
  ansible.builtin.shell:
    cmd: |
      set -u # Fail on unset vars
      set -o pipefail # Fail if any pipe cmd fails

      __run_acmesh_checksum_before=$({{ __run_acmesh_sha1sum_executable }} {{ (run_acmesh_cfg_config_home ~ '/account.conf') | ansible.builtin.quote }})

      if ! ./acme.sh \
            --info \
            --home {{ run_acmesh_cfg_home | ansible.builtin.quote }} \
            --config-home {{ run_acmesh_cfg_config_home | ansible.builtin.quote }} \
            --certhome {{ run_acmesh_cfg_cert_home | ansible.builtin.quote }} \
            --log {{ run_acmesh_cfg_logfile | ansible.builtin.quote }} \
            --log-level {{ run_acmesh_cfg_log_level | ansible.builtin.quote }} \
            --syslog {{ run_acmesh_cfg_syslog | ansible.builtin.quote }} \
            {{ '--auto-upgrade 1'
              if ((run_acmesh_autoupgrade is defined) and
                  (run_acmesh_autoupgrade))
              else
              '--auto-upgrade 0' }} \
            {{ '--accountemail ' ~ (run_acmesh_cfg_accountemail | ansible.builtin.quote)
              if ((run_acmesh_cfg_accountemail is defined) and
                  (run_acmesh_cfg_accountemail))
              else
              '' }}
      then
        exit 1
      fi

      __run_acmesh_checksum_after=$({{ __run_acmesh_sha1sum_executable }} {{ (run_acmesh_cfg_config_home ~ '/account.conf') | ansible.builtin.quote }})
      if [ "${__run_acmesh_checksum_before}" != "${__run_acmesh_checksum_after}" ]
      then
        printf 'Changed config file: %s' {{ (run_acmesh_cfg_config_home ~ '/account.conf') | ansible.builtin.quote }}
      fi

      exit 0
    executable: "/bin/bash" # Support for other shells untested (so far)
  args:
    chdir: "{{ run_acmesh_cfg_home }}"
  changed_when:
    - __run_acmesh_config_result['rc'] == 0
    - ('Changed config file') in __run_acmesh_config_result['stdout']
  register: __run_acmesh_config_result


- name: "Config | Default | Create systemd unit file (acmesh-renewal.service)"
  ansible.builtin.copy:
    dest: "{{ __run_acmesh_systemd_renewal_servicefile }}"
    content: |
      [Unit]
      Description=acme.sh - renew certificates
      After=network-online.target

      [Service]
      Type=oneshot
      User={{ run_acmesh_user }}
      Group={{ run_acmesh_group }}
      Environment="HOME={{ run_acmesh_cfg_home }}"
      WorkingDirectory={{ run_acmesh_cfg_home }}
      ExecStart="{{ run_acmesh_cfg_home }}"/acme.sh --cron --home "{{ run_acmesh_cfg_home }}" --config-home "{{ run_acmesh_cfg_config_home }}"
      SuccessExitStatus=0 2
      StandardError=journal
      SyslogIdentifier=acme.sh
    force: true
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r" # 0644
  notify: "run_acmesh: systemd daemon-reload"


- name: "Config | Default | Create systemd unit file (acmesh-renewal.timer)"
  ansible.builtin.copy:
    dest: "{{ __run_acmesh_systemd_renewal_timerfile }}"
    content: |
      [Unit]
      Description=acme.sh - daily certificate renewal

      [Timer]
      OnCalendar=daily
      RandomizedDelaySec=3h
      Persistent=true

      [Install]
      WantedBy=timers.target
    force: true
    owner: "root"
    group: "root"
    mode: "u=rw,g=r,o=r" # 0644
  notify: "run_acmesh: systemd daemon-reload"


# debugging: systemctl list-timers --all; systemd-analyze verify acmesh-renewal.timer
- name: "Config | Default | Manage (enable or disabled) acmesh-renewal.timer"
  ansible.builtin.systemd_service:
    name: "acmesh-renewal.timer"
    enabled: "{{ run_acmesh_autorenewal }}"
    daemon_reload: true
