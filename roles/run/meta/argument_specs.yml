# Role argument validation.
#
# See defaults/main.yml for details on each variable. For more information on
# the argument_specs.yml format, refer to the official Ansible documentation:
# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_reuse_roles.html#role-argument-validation

---

argument_specs:

  # foundata.acmesh/roles/run/tasks/main.yml entry point
  main:
    short_description: "Main entry point for the foundata.acmesh.run role"
    options:

      run_acmesh_state:
        description: |
          Determines whether the managed resources should be `present` or `absent`.

          `present` ensures that required components, such as software packages, are
          installed and configured.

          `absent` reverts changes as much as possible, such as removing packages,
          deleting created users, stopping services, restoring modified settings, …
        type: "str"
        default: "present"
        choices:
          - "present"
          - "absent"

      run_acmesh_autoupgrade:
        description: |
          If set to `true`, all managed packages will be upgraded during each Ansible
          run (e.g., when the package provider detects a newer version than the
          currently installed one).
        type: "bool"
        default: false

      run_acmesh_autorenewal:
        description: |
          Enables daily automatic certificate renewal via systemd timer (this role
          is not using acme.sh's cronjob function).
        type: "bool"
        default: true

      run_acmesh_environment:
        description: |
          Defines environment variables required for ACME DNS challenges.

          This is typically needed for DNS challenge plugins, such as those requiring
          DNS API credentials (e.g., `HETZNER_Token`, `INWX_User`, `INWX_Password`).
          Multiple variables can be defined in parallel to support different providers
          for different domains on the same server. For more details on acme.sh's
          DNS API support see https://github.com/acmesh-official/acme.sh/wiki/dnsapi

          Example:

          ```
          run_acmesh_environment:
            "HETZNER_Token": "\{\{ lookup('ansible.builtin.unvault', '...') | string | trim \}\}"
          ```
        type: "dict"
        default: {}

      run_acmesh_certs:
        description: |
          Defines certificates to be requested, their associated domains,
          challenge methods, and installation details. Each item in the list is a
          dictionary with suboptions / keys.

          Example:

          ```
          run_acmesh_certs:
            # first certificate: "example.org"
            - domains:
                - name: "example.org"
                  challenge: # parameters depend on type
                    type: "webroot"
                    webroot: "/var/www/example.org"
              install:
                ca_file: "/etc/pki/tls/certs/example.org/ca.cer"
                cert_file: "/etc/pki/tls/certs/example.org/cert.cer"
                fullcain_file: "/etc/pki/tls/certs/example.org/fullchain.cer"
                key_file: "/etc/pki/tls/certs/example.org/cert.key"
                reloadcmd: "systemctl reload apache2.service;"
            # second certificate: "foo.example.com" with an additional "bar.example.com" SAN
            - domains:
                - name: "foo.example.com"
                  challenge: # parameters depend on type
                    type: "dns"
                    dns_provider: "dns_hetzner"
                    challenge_alias: "foo.example.com.example.net"
                - name: "bar.example.com"
                  challenge:
                    type: "dns"
                    dns_provider: "dns_inwx"
                    challenge_alias: "bar.example.com.example.net"
              install:
                ca_file: "/etc/pki/tls/certs/foo.example.com/ca.cer"
                cert_file: "/etc/pki/tls/certs/foo.example.com/cert.cer"
                fullcain_file: "/etc/pki/tls/certs/foo.example.com/fullchain.cer"
                key_file: "/etc/pki/tls/certs/foo.example.com/cert.key"
                reloadcmd: "systemctl reload nginx.service; systemctl restart postfix.service"
              # optional, CA alias or URL, defaults to "letsencrypt". "{letsencrypt,buypass,google}_test"
              # for staging, see https://github.com/acmesh-official/acme.sh/wiki/Server for details.
              server: "zerossl"
              force: false  # optional
              debug: false # optional
              post_hook: ""  # optional
              renew_hook: "" # optional
              extra_flags: "" # optional (workaround for edge cases, put --whatever in here, used during issuing a cert")

          # Environment variables needed for the DNS API authentication for
          # type: "dns" and dns_provider: "dns_hetzner" /  dns_provider: "dns_inwx"
          run_acmesh_environment:
            HETZNER_Token: "\{\{ lookup('ansible.builtin.unvault', '...') | string | trim \}\}"
            INWX_User: "exampleuser"
            INWX_Password: "\{\{ lookup('ansible.builtin.unvault', '...') | string | trim \}\}"
          ```
        type: "list"
        elements: "dict"
        default: []
        options:
          domains:
            description: |
              List of dictionaries specifying the domains to be included in the
              certificate request, along with their challenge configurations. If multiple
              domains are defined, they will be included in the same certificate as
              Subject Alternative Names (SANs).
            type: "list"
            elements: "dict"
            options:
              name:
                description: |
                  The domain name to request a certificate for.
                type: "str"
              challenge:
                description: |
                  Dictionary defining the ACME challenge parameters. The required
                  parameters depend on the challenge type
                type: "dict"
                options:
                  type:
                    description: |
                     Challenge method. See https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert
                     for details.
                    type: "str"
                    choices:
                      - "alpn" # Uses acme.sh's builtin standalone webserver which can listen at 443 port to issue the cert.
                      - "dns"
                      - "standalone" # Uses acme.sh's builtin standalone webserver which can listen at 80 port to issue the cert.
                      - "webroot"
                  dns_provider:
                    description: |
                      Optional. Required for "dns" challenges. Specifies
                      the DNS provider for API-based verification. See
                      https://github.com/acmesh-official/acme.sh/wiki/dnsapi for supported
                      providers and their name. You usually have to provide credentials for
                      their APIs via the "run_acmesh_environment" variable.
                    type: "str"
                  challenge_alias:
                    description: |
                      Optional. Used with "dns" challenges when using CNAME delegation. Requires
                      a CNAME record such as:
                      `_acme-challenge.example.com` -> `_acme-challenge.example.com.example.net`
                      See https://github.com/acmesh-official/acme.sh/wiki/DNS-alias-mode for
                      details.
                    type: "str"
                  domain_alias:
                    description: |
                      Optional. Required for "webroot" challenges. Specifies
                      the directory where the ACME challenge response should be placed.
                      See https://github.com/acmesh-official/acme.sh/wiki/How-to-issue-a-cert
                      for details.
                    type: "str"
                  httpport:
                    description: |
                      Optional. Used with "httpport" challenges. Specifies
                      a non-standard port for acme.sh's internal HTTP webserver to listen,
                      might be needed behind a reverse proxy or load balancer.
                    type: "int"
                  tlsport:
                    description: |
                      Optional. Used with "alpn" challenges. Specifies a non-standard port for
                      acme.sh's internal HTTPS webserver to listen, might be needed behind a
                      reverse proxy or load balancer.
                    type: "int"
          install:
            description: |
              Dictionary defining where to install the issued certificates.
              The following keys specify file paths and a reload command:
              - ca_file: String. Path to the certificate authority (CA) file.
              - cert_file: String. Path to the certificate file.
              - fullchain_file: String. Path to the full certificate chain file.
              - key_file: String. Path to the private key file.
              - reloadcmd: String. Command to reload or restart services after certificate
                renewal (e.g., web server or mail server).
            type: "dict"
            options:
              ca_file:
                type: "str"
              cert_file:
                type: "str"
              fullcain_file:
                type: "str"
              key_file:
                type: "str"
              reloadcmd:
                type: "str"
          server:
            description: |
              Optional. Specifies the ACME CA server to use. Defaults
              to `letsencrypt`. Other options include:
              - "letsencrypt_test", "buypass_test", "google_test" for staging environments.
              - Custom CA URLs can also be used. See
                https://github.com/acmesh-official/acme.sh/wiki/Server for a full list
                and details.
            default: "letsencrypt"
            type: "str"
          force:
            description: |
              Optional. If true, forces certificate issuance even if
              the current certificate is still valid. Defaults to `false`.
            type: "bool"
          debug:
            type: "bool"
          dnssleep:
            type: "int"
          pre_hook:
            description: |
              Optional. Command to execute before attempting certificate
              issuance or renewal. See
              https://github.com/acmesh-official/acme.sh/wiki/Using-pre-hook-post-hook-renew-hook-reloadcmd
              for details.
            type: "str"
          post_hook:
            description: |
              Optional. Command to execute after a successful certificate issuance or renewal. See
              https://github.com/acmesh-official/acme.sh/wiki/Using-pre-hook-post-hook-renew-hook-reloadcmd
              for details.
            type: "str"
          renew_hook:
            description: |
              Optional. Command to execute after renewing the certificate. See
              https://github.com/acmesh-official/acme.sh/wiki/Using-pre-hook-post-hook-renew-hook-reloadcmd
              for details.
            type: "str"
          extra_flags:
            description: |
              Optional. Additional CLI flags for edge cases. Useful for passing custom parameters during
              certificate issuance wich are not natively supported by this role, just pass them as
              "--foo --bar 'baz'".
            type: "str"

      run_acmesh_user:
        description: |
          Specifies the service user account that runs acme.sh and owns relevant
          files and directories.
        type: "str"
        default: "acmesh"

      run_acmesh_group:
        description: |
          Specifies the group associated with the service user for managing
          acme.sh and its file permissions.
        type: "str"
        default: "acmesh"

      run_acmesh_cfg_accountemail:
        description: |
          Specifies the email address to be associated with the ACME account.
          This email is used for expiration notices and recovery purposes.
          Some ACME providers might refuse to issue certificates if not set.
        type: "str"
        default: ""

      run_acmesh_cfg_home:
        description: |
          Specifies the installation directory for the acme.sh software  (relates
          to acme.sh option --home). Will also  be used as home directory of the
          service user defined (see `run_acmesh_user``).
        type: "str"
        default: "/opt/acme.sh"

      run_acmesh_cfg_config_home:
        description: |
          Defines where configuration files are stored (relates to acme.sh option
          --config-home).
        type: "str"
        default: "/etc/acme.sh"

      run_acmesh_cfg_cert_home:
        description: |
          Specifies the directory where certificates are maintained by
          acme.sh (relates to acme.sh option --certhome).
          ⚠️ Do not rely on the files in this directory directly. Instead, copy
          the certificates where needed using the "install" key of `run_acmesh_certs`
          (relates to acme.sh option --install-cert). This ensures that the
          certificates are properly maintained and automatically reinstalled
          upon renewal. See the following for more information:
          https://github.com/acmesh-official/acme.sh/issues/2350#issuecomment-1449235599
        type: "str"
        default:  "/var/opt/acme.sh"

      run_acmesh_cfg_logfile:
        description: |
          Path to the log file where acme.sh logs its operations (relates to acme.sh
          option --log).
        type: "str"
        default: "/var/log/acme.sh.log"

      run_acmesh_cfg_log_level:
        description: |
          Specifies the log level (relates to acme.sh option --log-level).
          Possible values are 1 (less logging) and 2 (more logging).
        type: "int"
        default: 1
        choices:
          - 1
          - 2

      run_acmesh_cfg_syslog:
        description: |
          Specifies what to log (relates to acme.sh option --syslog).
          Possible values are 0 (disable syslog), 3 (errors), 6 (info) and 7
          (debug)
        type: "int"
        default: 3
        choices:
          - 0
          - 3
          - 6
          - 7
