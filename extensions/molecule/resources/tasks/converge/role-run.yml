# Tasks for the Molecule converge stage: Execute the collection role "run"
# against all driver-created instances.

- name: "Molecule | Converge | Issue certificates via DNS challenge: check for environment variables"
  ansible.builtin.set_fact:
    __testing_missing_envvars_dnschallenge: "{{ __testing_missing_envvars_dnschallenge | default([]) + [item] }}"
  when:
    - lookup('env', item, default='') == ''
  changed_when: false # noqa: no-changed-when
  loop:
    - "TEST_ACMESH_ACCOUNTEMAIL"
    - "TEST_ACMESH_TESTDOMAIN1"
    - "TEST_ACMESH_TESTDOMAIN1_DOMAIN_ALIAS"
    - "TEST_ACMESH_TESTDOMAIN2"
    - "TEST_ACMESH_TESTDOMAIN2_CHALLENGE_ALIAS"
    - "TEST_ACMESH_INWX_User"
    - "TEST_ACMESH_INWX_Password"


- name: "Molecule | Converge | Issue certificates via DNS challenge: show missing environment variables (if any)"
  ansible.builtin.debug:
    msg: >
      Tests regarding certificate issuing via DNS challenge will be skipped,
      required environment variables are missing or invalid: {{ __testing_missing_envvars_dnschallenge | join(', ') }}.
  changed_when: false # noqa: no-changed-when
  when:
    - __testing_missing_envvars_dnschallenge is defined
    - __testing_missing_envvars_dnschallenge | length > 0


- name: "Molecule | Converge | Issue certificates via DNS challenge: include the foundata.acmesh.run role"
  ansible.builtin.include_role:
    name: "foundata.acmesh.run"
  vars:
    run_acmesh_state: "present"
    run_acmesh_cfg_accountemail: "{{ lookup('env', 'TEST_ACMESH_ACCOUNTEMAIL') }}"
    run_acmesh_certs:
      # first certificate: main domain only
      - domains:
          - name: "{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN1') }}"
            challenge:
              type: "dns"
              dns_provider: "dns_inwx"
              domain_alias: "{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN1_DOMAIN_ALIAS') }}"
        install:
          ca_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN1') }}/ca.cer"
          cert_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN1') }}/cert.cer"
          fullcain_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN1') }}/fullchain.cer"
          key_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN1') }}/cert.key"
          reloadcmd: ""
        # "{letsencrypt,buypass,google}_test" for staging, see
        # https://github.com/acmesh-official/acme.sh/wiki/Server
        server: "letsencrypt_test"
        force: false # optional
        debug: false # optional
      # second certificate: main domain with an additional www. SAN
      - domains:
          - name: "{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}"
            challenge:
              type: "dns"
              dns_provider: "dns_inwx"
              challenge_alias: "{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2_CHALLENGE_ALIAS') }}"
          - name: "www.{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}"
            challenge:
              type: "dns"
              dns_provider: "dns_inwx"
              challenge_alias: "www.{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}.{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2_CHALLENGE_ALIAS') }}"
        install:
          ca_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}/ca.cer"
          cert_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}/cert.cer"
          fullcain_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}/fullchain.cer"
          key_file: "/etc/pki/tls/certs/{{ lookup('env', 'TEST_ACMESH_TESTDOMAIN2') }}/cert.key"
          reloadcmd: "true reload"
        # "{letsencrypt,buypass,google}_test" for staging, see
        # https://github.com/acmesh-official/acme.sh/wiki/Server
        server: "letsencrypt_test"
        force: false # optional
        debug: false # optional
        pre_hook: "true pre" # optional; using a dummy command here to later check if value updating works
        post_hook: "true post" # optional; using a dummy command here to later check if value updating works
        renew_hook: "true renew" # optional; using a dummy command here to later check if value updating works
        extra_flags: "" # optional (workaround for edge cases, put --whatever here)
    # Environment variables needed for the DNS API authentication for
    # type: "dns" and dns_provider: "dns_inwx"
    run_acmesh_environment:
      INWX_User: "{{ lookup('env', 'TEST_ACMESH_INWX_User') }}"
      INWX_Password: "{{ lookup('env', 'TEST_ACMESH_INWX_Password') }}"
  when:
    - __testing_missing_envvars_dnschallenge is not defined or
      (__testing_missing_envvars_dnschallenge | length <= 0)


- name: "Molecule | Converge | Basic fallback test (install only): include the foundata.acmesh.run role"
  ansible.builtin.include_role:
    name: "foundata.acmesh.run"
  vars:
    run_acmesh_state: "present"
  when:
    - __testing_missing_envvars_dnschallenge is defined
    - __testing_missing_envvars_dnschallenge | length > 0
